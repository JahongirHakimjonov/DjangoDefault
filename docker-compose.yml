services:
  web:
    build:
      context: .
      dockerfile: deployments/compose/backend/Dockerfile
    command: /start
    env_file:
      - .env
    restart: always
    volumes:
      - ./src:/app
      - ./assets:/assets
    ports:
      - ${PORT:-8001}:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend_network

  postgres:
    image: postgres:16-alpine
    env_file:
      - .env
    restart: on-failure
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    restart: on-failure
    environment:
      DATABASES_AUTH_USER: ${POSTGRES_USER}
      DATABASES_USER: ${POSTGRES_USER}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASES_DBNAME: ${POSTGRES_DB}
      DATABASES_HOST: ${POSTGRES_HOST}
      DATABASES_PORT: ${POSTGRES_PORT:-5432}
      PGBOUNCER_DEFAULT_POOL_SIZE: 100
      PGBOUNCER_MAX_CLIENT_CONN: 10000
      PGBOUNCER_LISTEN_PORT: ${POSTGRES_BOUNCER_PORT:-6432}
      PGBOUNCER_LISTEN_ADDR: "*"
      PGBOUNCER_LOGFILE: /var/log/pgbouncer/pgbouncer.log
    volumes:
      - pgbouncer_data:/etc/pgbouncer
    ports:
      - ${POSTGRES_BOUNCER_PORT:-6432}:6432
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend_network

  redis:
    image: redis:latest
    restart: on-failure
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  rabbitmq:
    image: rabbitmq:management
    env_file:
      - .env
    restart: on-failure
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - ${RABBITMQ_PORT:-15672}:15672
      - ${AMQP_PORT:-5672}:5672
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  celery_worker:
    build:
      context: .
      dockerfile: deployments/compose/backend/Dockerfile
    command: /start-celeryworker
    env_file:
      - .env
    restart: on-failure
    volumes:
      - ./src:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend_network

  celery_beat:
    build:
      context: .
      dockerfile: deployments/compose/backend/Dockerfile
    command: /start-celerybeat
    env_file:
      - .env
    restart: on-failure
    volumes:
      - ./src:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend_network

  celery_flower:
    build:
      context: .
      dockerfile: deployments/compose/backend/Dockerfile
    command: /start-flower
    env_file:
      - .env
    restart: on-failure
    volumes:
      - ./src:/app
    ports:
      - ${CELERY_FLOWER:-5555}:5555
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend_network

volumes:
  pg_data:
    driver: local
  pgbouncer_data:
    driver: local
  rabbitmq:
    driver: local

networks:
  backend_network:
    driver: bridge
    internal: true
